// Generated by view binder compiler. Do not edit!
package com.classicsmart.myhomegrocers.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import com.classicsmart.myhomegrocers.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemMyordersBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final Button btnCancelorder;

  @NonNull
  public final ImageView imOrderStatus;

  @NonNull
  public final TextView txtDateOfDelivery;

  @NonNull
  public final TextView txtOrderStatus;

  @NonNull
  public final TextView txtOrderid;

  @NonNull
  public final TextView txtRateOrder;

  @NonNull
  public final TextView txtReorder;

  @NonNull
  public final TextView txtTotalPrice;

  private ItemMyordersBinding(@NonNull CardView rootView, @NonNull Button btnCancelorder,
      @NonNull ImageView imOrderStatus, @NonNull TextView txtDateOfDelivery,
      @NonNull TextView txtOrderStatus, @NonNull TextView txtOrderid,
      @NonNull TextView txtRateOrder, @NonNull TextView txtReorder,
      @NonNull TextView txtTotalPrice) {
    this.rootView = rootView;
    this.btnCancelorder = btnCancelorder;
    this.imOrderStatus = imOrderStatus;
    this.txtDateOfDelivery = txtDateOfDelivery;
    this.txtOrderStatus = txtOrderStatus;
    this.txtOrderid = txtOrderid;
    this.txtRateOrder = txtRateOrder;
    this.txtReorder = txtReorder;
    this.txtTotalPrice = txtTotalPrice;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemMyordersBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemMyordersBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_myorders, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemMyordersBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_cancelorder;
      Button btnCancelorder = rootView.findViewById(id);
      if (btnCancelorder == null) {
        break missingId;
      }

      id = R.id.im_order_status;
      ImageView imOrderStatus = rootView.findViewById(id);
      if (imOrderStatus == null) {
        break missingId;
      }

      id = R.id.txt_date_of_delivery;
      TextView txtDateOfDelivery = rootView.findViewById(id);
      if (txtDateOfDelivery == null) {
        break missingId;
      }

      id = R.id.txt_order_status;
      TextView txtOrderStatus = rootView.findViewById(id);
      if (txtOrderStatus == null) {
        break missingId;
      }

      id = R.id.txt_orderid;
      TextView txtOrderid = rootView.findViewById(id);
      if (txtOrderid == null) {
        break missingId;
      }

      id = R.id.txt_rate_order;
      TextView txtRateOrder = rootView.findViewById(id);
      if (txtRateOrder == null) {
        break missingId;
      }

      id = R.id.txt_reorder;
      TextView txtReorder = rootView.findViewById(id);
      if (txtReorder == null) {
        break missingId;
      }

      id = R.id.txt_total_price;
      TextView txtTotalPrice = rootView.findViewById(id);
      if (txtTotalPrice == null) {
        break missingId;
      }

      return new ItemMyordersBinding((CardView) rootView, btnCancelorder, imOrderStatus,
          txtDateOfDelivery, txtOrderStatus, txtOrderid, txtRateOrder, txtReorder, txtTotalPrice);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
