// Generated by view binder compiler. Do not edit!
package com.classicsmart.myhomegrocers.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import com.classicsmart.myhomegrocers.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemBookingidBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView boardingCity;

  @NonNull
  public final TextView boardingPoint;

  @NonNull
  public final TextView bookingstatus;

  @NonNull
  public final TextView busno;

  @NonNull
  public final CardView cardDetails;

  @NonNull
  public final CardView cardPassenger;

  @NonNull
  public final TextView confirmed;

  @NonNull
  public final TextView departureCity;

  @NonNull
  public final TextView departurePoint;

  @NonNull
  public final RelativeLayout llPnrno;

  @NonNull
  public final TextView vrltravels;

  private ItemBookingidBinding(@NonNull RelativeLayout rootView, @NonNull TextView boardingCity,
      @NonNull TextView boardingPoint, @NonNull TextView bookingstatus, @NonNull TextView busno,
      @NonNull CardView cardDetails, @NonNull CardView cardPassenger, @NonNull TextView confirmed,
      @NonNull TextView departureCity, @NonNull TextView departurePoint,
      @NonNull RelativeLayout llPnrno, @NonNull TextView vrltravels) {
    this.rootView = rootView;
    this.boardingCity = boardingCity;
    this.boardingPoint = boardingPoint;
    this.bookingstatus = bookingstatus;
    this.busno = busno;
    this.cardDetails = cardDetails;
    this.cardPassenger = cardPassenger;
    this.confirmed = confirmed;
    this.departureCity = departureCity;
    this.departurePoint = departurePoint;
    this.llPnrno = llPnrno;
    this.vrltravels = vrltravels;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemBookingidBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemBookingidBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_bookingid, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemBookingidBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.boarding_city;
      TextView boardingCity = rootView.findViewById(id);
      if (boardingCity == null) {
        break missingId;
      }

      id = R.id.boarding_point;
      TextView boardingPoint = rootView.findViewById(id);
      if (boardingPoint == null) {
        break missingId;
      }

      id = R.id.bookingstatus;
      TextView bookingstatus = rootView.findViewById(id);
      if (bookingstatus == null) {
        break missingId;
      }

      id = R.id.busno;
      TextView busno = rootView.findViewById(id);
      if (busno == null) {
        break missingId;
      }

      id = R.id.card_details;
      CardView cardDetails = rootView.findViewById(id);
      if (cardDetails == null) {
        break missingId;
      }

      id = R.id.card_passenger;
      CardView cardPassenger = rootView.findViewById(id);
      if (cardPassenger == null) {
        break missingId;
      }

      id = R.id.confirmed;
      TextView confirmed = rootView.findViewById(id);
      if (confirmed == null) {
        break missingId;
      }

      id = R.id.departure_city;
      TextView departureCity = rootView.findViewById(id);
      if (departureCity == null) {
        break missingId;
      }

      id = R.id.departure_point;
      TextView departurePoint = rootView.findViewById(id);
      if (departurePoint == null) {
        break missingId;
      }

      id = R.id.ll_pnrno;
      RelativeLayout llPnrno = rootView.findViewById(id);
      if (llPnrno == null) {
        break missingId;
      }

      id = R.id.vrltravels;
      TextView vrltravels = rootView.findViewById(id);
      if (vrltravels == null) {
        break missingId;
      }

      return new ItemBookingidBinding((RelativeLayout) rootView, boardingCity, boardingPoint,
          bookingstatus, busno, cardDetails, cardPassenger, confirmed, departureCity,
          departurePoint, llPnrno, vrltravels);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
