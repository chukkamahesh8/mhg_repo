// Generated by view binder compiler. Do not edit!
package com.classicsmart.myhomegrocers.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import com.classicsmart.myhomegrocers.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemAddressBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CardView deliveryaddresscardview;

  @NonNull
  public final RadioButton homeradio;

  @NonNull
  public final TextView txtArea;

  @NonNull
  public final TextView txtCity;

  @NonNull
  public final TextView txtDoorNumber;

  @NonNull
  public final TextView txtLocation;

  @NonNull
  public final TextView txtName;

  @NonNull
  public final TextView txtPhoneNumber;

  @NonNull
  public final TextView txtPincode;

  private ItemAddressBinding(@NonNull LinearLayout rootView,
      @NonNull CardView deliveryaddresscardview, @NonNull RadioButton homeradio,
      @NonNull TextView txtArea, @NonNull TextView txtCity, @NonNull TextView txtDoorNumber,
      @NonNull TextView txtLocation, @NonNull TextView txtName, @NonNull TextView txtPhoneNumber,
      @NonNull TextView txtPincode) {
    this.rootView = rootView;
    this.deliveryaddresscardview = deliveryaddresscardview;
    this.homeradio = homeradio;
    this.txtArea = txtArea;
    this.txtCity = txtCity;
    this.txtDoorNumber = txtDoorNumber;
    this.txtLocation = txtLocation;
    this.txtName = txtName;
    this.txtPhoneNumber = txtPhoneNumber;
    this.txtPincode = txtPincode;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemAddressBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemAddressBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_address, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemAddressBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.deliveryaddresscardview;
      CardView deliveryaddresscardview = rootView.findViewById(id);
      if (deliveryaddresscardview == null) {
        break missingId;
      }

      id = R.id.homeradio;
      RadioButton homeradio = rootView.findViewById(id);
      if (homeradio == null) {
        break missingId;
      }

      id = R.id.txtArea;
      TextView txtArea = rootView.findViewById(id);
      if (txtArea == null) {
        break missingId;
      }

      id = R.id.txtCity;
      TextView txtCity = rootView.findViewById(id);
      if (txtCity == null) {
        break missingId;
      }

      id = R.id.txtDoorNumber;
      TextView txtDoorNumber = rootView.findViewById(id);
      if (txtDoorNumber == null) {
        break missingId;
      }

      id = R.id.txtLocation;
      TextView txtLocation = rootView.findViewById(id);
      if (txtLocation == null) {
        break missingId;
      }

      id = R.id.txtName;
      TextView txtName = rootView.findViewById(id);
      if (txtName == null) {
        break missingId;
      }

      id = R.id.txtPhoneNumber;
      TextView txtPhoneNumber = rootView.findViewById(id);
      if (txtPhoneNumber == null) {
        break missingId;
      }

      id = R.id.txtPincode;
      TextView txtPincode = rootView.findViewById(id);
      if (txtPincode == null) {
        break missingId;
      }

      return new ItemAddressBinding((LinearLayout) rootView, deliveryaddresscardview, homeradio,
          txtArea, txtCity, txtDoorNumber, txtLocation, txtName, txtPhoneNumber, txtPincode);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
